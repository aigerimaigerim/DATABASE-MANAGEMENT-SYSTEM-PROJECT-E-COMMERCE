CREATE TABLE ADDRESS(
    ADDRESSID NUMBER(6),
    COUNTRYID NUMBER(6) REFERENCES COUNTRY(COUNTRYID),
    CITY VARCHAR(30),
    REGION VARCHAR(30),
    STREETNUM CHAR(30),
    POSTAL_CODE NUMBER(6),
    CONSTRAINT PK_ADDRESSID PRIMARY KEY (ADDRESSID)
);


CREATE TABLE USER_INFO(
    USERID NUMBER(6),
    FIRSTN VARCHAR(20),
    LASTN VARCHAR(20),
    PHONEN NUMBER(10),
    EMAILN CHAR(30),
    PASSWORDN CHAR(10),
    CONSTRAINT PK_USERID PRIMARY KEY (USERID)
);


CREATE TABLE COUNTRY(
    COUNTRYID NUMBER(6),
    COUNTRYN VARCHAR(50),
    CONSTRAINT PK_COUNTRYID PRIMARY KEY (COUNTRYID)
);


CREATE TABLE USER_ADDRESS(
    USERID NUMBER(6) REFERENCES USER_INFO(USERID),
    ADDRESSID NUMBER(6) REFERENCES ADDRESS(ADDRESSID)
);


CREATE TABLE PAYMENT_TYPE(
    PAYMENT_TYPE_ID NUMBER(2),
    PAYMENT_TYPE VARCHAR(6),
    CONSTRAINT PK_PAYMENT_TYPE_ID PRIMARY KEY (PAYMENT_TYPE_ID)
);


CREATE TABLE PAYMENT_TYPEMETHOD(
    PAYMENT_TYPEMETHODID NUMBER(3),
    USERID NUMBER(6) REFERENCES USER_INFO(USERID),
    PAYMENT_TYPE_ID NUMBER(2) REFERENCES PAYMENT_TYPE(PAYMENT_TYPE_ID),
    PROVIDER VARCHAR(20),
    CARD_NUMBER NUMBER(16),
    CVV NUMBER(3),
    CONSTRAINT PK_PAYMENT_TYPEMETHODID PRIMARY KEY (PAYMENT_TYPEMETHODID)
);


CREATE TABLE SHOPPING_BASKET(
    SHOPPING_BASKETID NUMBER(4),
    USERID NUMBER(6) REFERENCES USER_INFO(USERID),
    CONSTRAINT PK_SHOPPING_BASKETID PRIMARY KEY (SHOPPING_BASKETID)
);


CREATE TABLE PRODUCT_CATEGORY(
    CATEGORYID NUMBER(4),
    CATEGORYN VARCHAR(20),
    CONSTRAINT PK_CATEGORYID PRIMARY KEY (CATEGORYID)
);


CREATE TABLE PRODUCTT(
    PRODUCTID NUMBER(5),
    CATEGORYID NUMBER(4) REFERENCES PRODUCT_CATEGORY(CATEGORYID),
    PRODUCTN VARCHAR(40),
    PRODUCT_DES CHAR(255),
    CONSTRAINT PK_PRODUCTID PRIMARY KEY (PRODUCTID)
);


CREATE TABLE PRODUCTT_ITEM(
    ITEMID NUMBER(5),
    PRODUCTID NUMBER(5) REFERENCES PRODUCTT(PRODUCTID),
    QUANTITY_IN_STOCK NUMBER(4),
    PRICE CHAR(255),
    CONSTRAINT PK_ITEMID PRIMARY KEY (ITEMID)
);


CREATE TABLE VARIATION(
    VARIATIONID NUMBER(5),
    CATEGORYID NUMBER(4) REFERENCES PRODUCT_CATEGORY(CATEGORYID),
    VARIATIONN VARCHAR(20),
    CONSTRAINT PK_VARIATIONID PRIMARY KEY (VARIATIONID)
);


CREATE TABLE VARIATION_OPTION(
    VAR_OPTIONID NUMBER(5),
    VARIATIONID NUMBER(5) REFERENCES VARIATION(VARIATIONID),
    OPTIONV CHAR(255),
    CONSTRAINT PK_VAR_OPTIONID PRIMARY KEY (VAR_OPTIONID)
);


CREATE TABLE PRODUCT_VAR(
    ITEMID NUMBER(5) REFERENCES PRODUCTT_ITEM(ITEMID),
    VAR_OPTIONID NUMBER(5) REFERENCES VARIATION_OPTION(VAR_OPTIONID)
);


CREATE TABLE DISCOUNT(
    DISCOUNTID NUMBER(3),
    DICOUNTN VARCHAR(20),
    DICOUNT_PERCENT CHAR(255),
    START_DATE CHAR(255),
    END_DATE CHAR(255),
    CONSTRAINT PK_DISCOUNTID PRIMARY KEY (DISCOUNTID)
);


CREATE TABLE DISCOUNT_CAT(
    CATEGORYID NUMBER(4) REFERENCES PRODUCT_CATEGORY(CATEGORYID),
    DISCOUNTID NUMBER(3) REFERENCES DISCOUNT(DISCOUNTID)
);


CREATE TABLE SHOPPING_BASKET_ITEM(
    BASKET_ITEMID NUMBER(4),
    SHOPPING_BASKETID NUMBER(4) REFERENCES SHOPPING_BASKET(SHOPPING_BASKETID), 
    ITEMID NUMBER(5) REFERENCES PRODUCTT_ITEM(ITEMID),
    QUANTITY NUMBER(4),
    CONSTRAINT PK_BASKET_ITEMID PRIMARY KEY (BASKET_ITEMID)
);


CREATE TABLE ORDER_STATUS(
    STATUSID NUMBER(4),
    STATUS VARCHAR(20),
    CONSTRAINT PK_STATUSID PRIMARY KEY (STATUSID)
);


CREATE TABLE SHIPPING_METHOD(
    SHIPMID NUMBER(4),
    SHIPMN VARCHAR(20),
    SHIPM_PRICE CHAR(255),
    CONSTRAINT PK_SHIPMID PRIMARY KEY (SHIPMID)
);


CREATE TABLE SHOP_ORDER(
    ORDERID NUMBER(4),
    USERID NUMBER(6) REFERENCES USER_INFO(USERID),
    ORDER_DATE CHAR(255),
    PAYMENT_TYPEMETHODID NUMBER(3) REFERENCES PAYMENT_TYPEMETHOD(PAYMENT_TYPEMETHODID),
    ADDRESSID NUMBER(6) REFERENCES ADDRESS(ADDRESSID),
    SHIPMID NUMBER(4) REFERENCES SHIPPING_METHOD(SHIPMID),
    STATUSID NUMBER(4) REFERENCES ORDER_STATUS(STATUSID),
    ORDER_TOTAL NUMBER(10),
    CONSTRAINT PK_ORDERID PRIMARY KEY (ORDERID)
);


CREATE TABLE ORDER_LINE(
    ORDERED_PID NUMBER(4),
    ITEMID NUMBER(5) REFERENCES PRODUCTT_ITEM(ITEMID),
    ORDERID NUMBER(4) REFERENCES SHOP_ORDER(ORDERID),
    ORDER_QUANTITY NUMBER(4),
    TOTAL_PRICE NUMBER(20),
    CONSTRAINT PK_ORDERED_PID PRIMARY KEY (ORDERED_PID)
);


CREATE TABLE USER_COMMENT(
    COMMENTID NUMBER(4),
    USERID  NUMBER(6) REFERENCES USER_INFO(USERID),
    ORDERED_PID NUMBER(4) REFERENCES ORDER_LINE(ORDERED_PID),
    RATING NUMBER(2),
    COMMENT_TXT CHAR(255),
    CONSTRAINT PK_COMMENTID PRIMARY KEY (COMMENTID)
);


CREATE TABLE SUPPLIERS(
    SUPPLIERSID NUMBER(6),
    SUPPLIERN CHAR(255),
    SUPPLIER_EMAIL CHAR(255),
    SUPPLIER_NUM NUMBER(12),
    PRODUCTID NUMBER(5) REFERENCES PRODUCTT(PRODUCTID),
    CATEGORYID NUMBER(4) REFERENCES PRODUCT_CATEGORY(CATEGORYID),
    VAR_OPTIONID NUMBER(5) REFERENCES VARIATION_OPTION(VAR_OPTIONID),
    CONSTRAINT PK_SUPPLIERSID PRIMARY KEY (SUPPLIERSID)
);


SELECT SUPPLIERN FROM SUPPLIERS WHERE PRODUCTID = 12560;


SELECT SUPPLIERS.PRODUCTID, SUPPLIERS.SUPPLIERN FROM SUPPLIERS 
INNER JOIN PRODUCTT
ON SUPPLIERS.PRODUCTID = PRODUCTT.PRODUCTID WHERE SUPPLIERS.SUPPLIERN LIKE 'D%';


SELECT PRODUCTT.PRODUCTN, PRODUCTT.PRODUCTID, PRODUCTT_ITEM.ITEMID, PRODUCTT_ITEM.QUANTITY_IN_STOCK, PRODUCTT_ITEM.PRICE 
FROM PRODUCTT_ITEM 
INNER JOIN PRODUCTT
ON PRODUCTT_ITEM.PRODUCTID = PRODUCTT.PRODUCTID;


UPDATE ADDRESS 
SET COUNTRYID = 740, CITY = 'Tirana', STREETNUM = 'Maryland 34', POSTAL_CODE = 141717
WHERE ADDRESSID = 565427;

ALTER TABLE ADDRESS DROP COLUMN REGION;

ALTER TABLE PAYMENT_TYPEMETHOD
RENAME COLUMN PAYMENT_TYPEMETHODID TO PAY_MID;

RENAME PAYMENT_TYPEMETHOD TO PAY_TYPE_M;

DELETE FROM SUPPLIERS WHERE PRODUCTID = 67032 AND VAR_OPTIONID = 15684;

SELECT PRODUCTT.PRODUCTID, PRODUCTT.PRODUCTN, PRODUCTT_ITEM.PRODUCTID, PRODUCTT_ITEM.ITEMID, PRODUCT_VAR.ITEMID, VARIATION_OPTION.VAR_OPTIONID, 
VARIATION_OPTION.VARIATIONID, VARIATION_OPTION.OPTIONV
FROM VARIATION_OPTION 
INNER JOIN PRODUCT_VAR
ON VARIATION_OPTION.VAR_OPTIONID = PRODUCT_VAR.VAR_OPTIONID 
INNER JOIN PRODUCTT_ITEM
ON PRODUCTT_ITEM.ITEMID = PRODUCT_VAR.ITEMID
INNER JOIN PRODUCTT
ON PRODUCTT_ITEM.PRODUCTID = PRODUCTT.PRODUCTID
WHERE VARIATION_OPTION.OPTIONV = 'S' 
ORDER BY(PRODUCTT.PRODUCTN);


SELECT PRODUCTT.PRODUCTID, PRODUCTT.PRODUCTN, PRODUCTT_ITEM.PRODUCTID, PRODUCTT.CATEGORYID
FROM PRODUCTT_ITEM
INNER JOIN PRODUCTT
ON PRODUCTT.PRODUCTID = PRODUCTT_ITEM.PRODUCTID
WHERE PRODUCTT.CATEGORYID = 2255 AND PRODUCTT.PRODUCTN LIKE 'C%';


SELECT MAX(PRICE)
FROM PRODUCTT_ITEM 
WHERE PRODUCTID IN 
(SELECT PRODUCTID FROM PRODUCTT);


SELECT USER_INFO.USERID FROM USER_INFO
WHERE NOT EXISTS 
(SELECT 1 FROM SHOP_ORDER WHERE USER_INFO.USERID = SHOP_ORDER.ORDERID AND SHOP_ORDER.STATUSID = 100);


SELECT PRODUCT_VAR.ITEMID FROM PRODUCT_VAR 
WHERE PRODUCT_VAR.VAR_OPTIONID = ANY (
    SELECT VARIATION_OPTION.VAR_OPTIONID FROM VARIATION_OPTION
    WHERE VARIATION_OPTION.VARIATIONID = 75211);


SELECT PRODUCTT_ITEM.ITEMID FROM PRODUCTT_ITEM 
WHERE PRODUCTT_ITEM.PRODUCTID = 12560 AND PRICE > ALL (
    SELECT PRODUCTT_ITEM.PRICE FROM PRODUCTT_ITEM
    WHERE PRODUCTT_ITEM.PRODUCTID = 74543);


SELECT COUNT(*) FROM USER_ADDRESS 
WHERE USERID NOT IN 
(SELECT COUNTRYID FROM COUNTRY WHERE COUNTRYID = 321);


SELECT PRODUCT_VAR.ITEMID
FROM PRODUCT_VAR
WHERE PRODUCT_VAR.ITEMID = 54439
UNION
SELECT SUPPLIERS.VAR_OPTIONID
FROM SUPPLIERS
WHERE SUPPLIERS.VAR_OPTIONID = 29534;


SELECT PRODUCT_VAR.ITEMID
FROM PRODUCT_VAR
WHERE PRODUCT_VAR.ITEMID BETWEEN 3023 AND 96466
INTERSECT
SELECT PRODUCTT_ITEM.ITEMID
FROM PRODUCTT_ITEM
WHERE PRODUCTT_ITEM.QUANTITY_IN_STOCK = 100;


CREATE VIEW USER_ORDERS AS
SELECT USER_INFO.USERID, USER_INFO.FIRSTN, USER_INFO.LASTN, PAY_TYPE_M.PAY_MID, PAY_TYPE_M.PAYMENT_TYPE_ID
FROM USER_INFO
INNER JOIN PAY_TYPE_M
ON USER_INFO.USERID = PAY_TYPE_M.USERID;


CREATE VIEW CATEGORY_PRODUCT AS
SELECT PRODUCT_CATEGORY.CATEGORYID, PRODUCT_CATEGORY.CATEGORYN, PRODUCTT.PRODUCTID, PRODUCTT.PRODUCTN
FROM PRODUCT_CATEGORY
INNER JOIN PRODUCTT
ON PRODUCT_CATEGORY.CATEGORYID = PRODUCTT.CATEGORYID;


ALTER TABLE SHIPPING_METHOD
ADD CONSTRAINT SHIPPING_METHOD_UNIQUE UNIQUE (SHIPMN);


CREATE OR REPLACE TRIGGER "PRICE_PRODUCT"
AFTER
INSERT ON "SHOP_ORDER"
FOR EACH ROW
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    IF :NEW.STATUSID LIKE '100' THEN
        INSERT INTO shop_order(orderid) values ('product_item', :new.itemid, :new.price - 5$);
        commit;
    END IF;
end;



CREATE INDEX ORDER_IDX ON SHOP_ORDER(ORDERID, ORDER_TOTAL);

CREATE INDEX PRODUCT_IDX ON PRODUCTT(PRODUCTID, PRODUCTN);

BEGIN TRANSACTION
 INSERT INTO PRODUCTT_ITEM VALUES(54439, 12560, 100, 20$)
 UPDATE PRODUCTT_ITEM SET PRICE = 50$ WHERE ITEMID = 54439
 DELETE FROM PRODUCTT_ITEM WHERE ITEMID = 54439
COMMIT TRANSACTION
